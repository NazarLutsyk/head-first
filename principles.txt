1. Detect aspects of the applications that can vary and separate them from aspects that are static.
2. Do programming on the interface level, but not the implementation level
3. Prefer composition rather than inheritance
   (Inheritance defines behavior statically during the compilation
    Composition is more flexible and allows you to modify class behavior on the fly)
4. Strive to earn low coupling
5. Classes should be open for Extension and closed for Modification
   (We have to detect parts of the application which can be POSSIBLY CHANGED LATER,
    and apply this principle for them. Using this principle everywhere is a BAD idea,
    your application can become too complex)